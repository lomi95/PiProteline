% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functional_analysis.R
\name{functional_analysis}
\alias{functional_analysis}
\title{Functional Analysis for Network and LDA Results}
\usage{
functional_analysis(
  LDA_pairw.results,
  Unweighted_CN,
  Weighted_CN,
  names_of_groups,
  tax_ID,
  categories
)
}
\arguments{
\item{LDA_pairw.results}{The results from pairwise LDA analysis.}

\item{Unweighted_CN}{The list of critical nodes identified in unweighted networks.}

\item{Weighted_CN}{The list of critical nodes identified in weighted networks.}

\item{names_of_groups}{A character vector specifying the names of the groups for analysis.}

\item{tax_ID}{An integer representing the taxonomy ID for the organism (e.g., 9606 for human).}

\item{categories}{A character vector specifying the enrichment categories to filter (e.g., "GO", "KEGG").}
}
\value{
A list containing:
\describe{
  \item{summaryTable}{A list containing summary data for LDA results, unweighted, and weighted networks.}
  \item{enrLDA}{A list of enrichment results for LDA-derived gene sets.}
  \item{enrNetw}{A list containing enrichment results for network-derived gene sets, including differential enrichment.}
  \item{enr_LDA.Netw}{A list of intersecting enrichment terms between LDA and network results, for both same and opposite trends.}
}
}
\description{
This function performs a functional analysis combining LDA pairwise results and network critical nodes. It generates a summary table, performs enrichment analysis for LDA and network results, and identifies common enrichment terms.
}
\examples{
\dontrun{
# Example usage
LDA_pairw.results <- list(
  Comparison1 = list(
    VolcanoPlots = list(
      list(list(Genes = list(UP = c("Gene1", "Gene2"), DOWN = c("Gene3"))))
    )
  )
)
Unweighted_CN <- list(SearchMode1 = list(Hubs = list(Group1 = data.frame(Gene1 = 1))))
Weighted_CN <- list(SearchMode1 = list(Hubs = list(Group1 = data.frame(Gene2 = 1))))
names_of_groups <- c("Group1", "Group2")
tax_ID <- 9606
categories <- c("GO", "KEGG")

functional_analysis(LDA_pairw.results, Unweighted_CN, Weighted_CN,
                    names_of_groups, tax_ID, categories)

}
}
